/**
* @stylesheet response-type-fraction-model.css Fraction Model
* @parent ux.response-types
*The fraction model response type allows students to respond to an item by identifying the number of selected and unselected parts needed to represent a fraction.
*
* The following demo presents the fraction model response type as a rectangular set of wedges. The __Undo__ button does not function as it will during an assessment.
* @iframe ux/demos/response-type-fraction-model/fm-grid.html 640
*
*
* <span style="font-size:13px;display:block;margin-top:-30px">To view alternative presentations and styling, use the Change Theme <img src="static/img/icon-theme.svg" style="max-height: 1.75em; max-width: 1.75em;" /> and Read Aloud <img src="static/img/icon-tts.svg" style="max-height: 1.75em; max-width: 1.75em;" /> buttons in the upper-right of the screen.</span>
**/

/**
* @styles 0-fm-model Model
* A title may appear centered above the fraction model. If present, the title is bolded and in all caps.
*
* Fraction models can be presented as either a rectangular grid or a circular set of wedges. The outer border of the model is dark gray <span class="no-wrap">`#1A1A1A` <span class="callout-swatch" style="background-color:#1A1A1A"></span></span>. The circular variant is shown below.
*
* The following demo presents the fraction model response type as a circular set of wedges. The __Undo__ button does not function as it will during an assessment.
* @iframe ux/demos/response-type-fraction-model/fm-circular.html 580
*
*
* <span style="font-size:13px;display:block;margin-top:-30px">To view alternative presentations and styling, use the Change Theme <img src="static/img/icon-theme.svg" style="max-height: 1.75em; max-width: 1.75em;" /> and Read Aloud <img src="static/img/icon-tts.svg" style="max-height: 1.75em; max-width: 1.75em;" /> buttons in the upper-right of the screen.</span>
*
*
* Each unit in the model has the following states.
* * _Default_. The unit has a gray <span class="no-wrap">`#757575` <span class="callout-swatch" style="background-color:#757575"></span></span> border.
* * _Hover_. Visible when the cursor is over the unit in the default state. Unit background becomes light blue <span class="no-wrap">`#C4DCF2` <span class="callout-swatch" style="background-color:#C4DCF2"></span></span>. The `pointer` cursor is shown.
* * _Selected_. Unit background becomes blue <span class="no-wrap">`#0A97FF` <span class="callout-swatch" style="background-color:#0A97FF"></span></span>, and unit border becomes dark blue <span class="no-wrap">`#002040` <span class="callout-swatch" style="background-color:#002040"></span></span>. Selected unit border color overrides default border color.
* * _Hover selected_. Visible when the cursor is over a selected unit. Unit background becomes light blue <span class="no-wrap">`#A4C9EB` <span class="callout-swatch" style="background-color:#A4C9EB"></span></span>, and border color becomes medium blue <span class="no-wrap">`#596C80` <span class="callout-swatch" style="background-color:#596C80"></span></span>. The `pointer` cursor is shown.
* * _Disabled_. Visible when the unit is inactive (e.g., when a modal system tool like Scratchwork is enabled). Unit border becomes dark gray <span class="no-wrap">`#484848` <span class="callout-swatch" style="background-color:#484848"></span></span>. If unit is selected, background becomes medium gray <span class="no-wrap">`#949494` <span class="callout-swatch" style="background-color:#949494"></span></span>.
*
* Note: To avoid state confusion, unit hover states do not appear immediately after a test taker has selected or deselected a unit. The test taker must move the cursor off of the unit and then back on for the hover state to appear.
**/

.fm-title {
  font-size: 1em;
  font-weight: bold;
  margin: 0 auto 0.5em;
  text-align: center;
  text-transform: uppercase;
}

.fm-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);
  grid-auto-columns: 1fr;
  grid-auto-rows: 1fr;
  height: 12em;
  margin: 0 auto 1.5em;
  position: relative;
  width: 12em;
}

.fm-grid::after {
  border: 0.083em solid #1a1a1a;
  bottom: -0.042em;
  content: "";
  display: block;
  left: -0.042em;
  pointer-events: none;
  position: absolute;
  right: -0.042em;
  top: -0.042em;
}

.fm-circle {
  border-radius: 50%;
  box-shadow: 0 0 0 2px #1a1a1a;
  height: 12em;
  margin: 0 auto 1.5em;
  overflow: hidden;
  position: relative;
  width: 12em;
}

.fm-wedge-container {
  height: 100%;
  left: calc(50% + 1px);
  top: 0px;
  overflow: hidden;
  pointer-events: none;
  position: absolute;
  width: calc(50% + 3px);
}

.fm-model input {
  opacity: 0;
  position: absolute;
  z-index: -1;
}

.fm-grid label {
  border: 0.042em solid #757575;
  cursor: pointer;
}

.fm-circle label {
  background: #fff;
  border: 0.083em solid #757575;
  box-shadow: none !important;
  cursor: pointer;
  height: calc(50% + 0.125em);
  left: -0.083em;
  outline: none !important;
  pointer-events: auto;
  position: absolute;
  top: -0.083em;
  transform-origin: calc(100% - 0.042em) calc(100% - 0.042em);
  width: calc(50% + 0.125em);
  z-index: 0 !important;
}
.fm-wedge-container label {
  left: -100%;
  width: 100%;
}
.fm-circle .fm-wedge-1 {
  height: calc(100% + 0.167em);
  width: calc(100% + 0.167em);
}
.fm-circle .fm-wedge-2 {
  height: calc(100% + 0.167em);
  transform: none !important;
}
.fm-circle .fm-wedge-2:nth-of-type(2) {
  transform: translateX(calc(100% - 0.083em)) !important;
}

.fm-circle .fm-wedge-3::before {
  background: #fff;
  content: "";
  display: block;
  height: 100%;
  position: absolute;
  transform: rotate(-30deg);
  transform-origin: calc(100% + 0.042em) calc(100% + 0.042em);
  width: 100%;
}
.fm-circle .fm-wedge-3:hover::before,
.fm-model input.focus-tabbed:focus + .fm-wedge-3::before {
  background: #c4dcf2;
}
.fm-model label.fm-initial-state:hover::before,
.fm-model input.focus-tabbed:focus + .fm-wedge-3.fm-initial-state::before,
html.can-touch .fm-model .fm-wedge-3:hover::before {
  background: #fff;
}
.fm-model input:checked + .fm-wedge-3::before,
.fm-model
  input.focus-tabbed:checked:focus
  + .fm-wedge-3.fm-initial-state::before,
.fm-model input:checked + .fm-wedge-3.fm-initial-state:hover::before,
html.can-touch .fm-model input:checked + .fm-wedge-3::before {
  background: #0a97ff;
}
.fm-model input:checked + .fm-wedge-3:hover::before,
.fm-model input.focus-tabbed:checked:focus + .fm-wedge-3::before {
  background: #a4c9eb;
}
.fm-model input[disabled]:checked + .fm-wedge-3::before {
  background: #949494;
}

.fm-model label:hover,
.fm-model input.focus-tabbed:focus + label {
  background: #c4dcf2;
}
.fm-model label.fm-initial-state:hover,
.fm-model input.focus-tabbed:focus + label.fm-initial-state,
html.can-touch .fm-model label:hover {
  background: #fff;
}
.fm-model input:focus + label {
  outline: 1px dotted;
  outline-offset: -5px;
}
.fm-model input:checked + label,
.fm-model input.focus-tabbed:checked:focus + label.fm-initial-state,
.fm-model input:checked + label.fm-initial-state:hover,
html.can-touch .fm-model input:checked + label {
  background: #0a97ff;
  border-color: #002040;
  box-shadow: 0 0 0 0.042em #002040;
  color: #fff;
  z-index: 1;
}
.fm-model input:checked + label:hover,
.fm-model input.focus-tabbed:checked:focus + label {
  background: #a4c9eb;
  border-color: #596c80;
  box-shadow: 0 0 0 0.042em #596c80;
  color: inherit;
  z-index: 2;
}
.fm-model input[disabled] + label {
  border-color: #484848;
  box-shadow: none;
  pointer-events: none;
}
.fm-model input[disabled]:checked + label {
  background: #949494;
}

/**
* @styles 1-fm-controls Controls
* Controls appear centered below the fraction model.
*
* [increment-controls.css] are used to adjust the number of units in the model. Rectangular models have a __Columns__ control followed by a __Rows__ control. Circular models have a single __Sections__ control. The minimum and maximum number of columns, rows, or sections varies depending on the measurement goals of the item.
*
* __Undo__ and __Reset__ buttons are provided beneath the increment control(s). The buttons are full-justified with respect to the increment control(s).  Both buttons use the small secondary filled button style. (See the [buttons.css] page for more information.)
* * The __Undo__ button reverts the last change to the fraction model.
* * The __Reset__ button restores the fraction model to its initial state.
**/
.fm-controls {
  display: inline-block;
}

.response-area-iic.response-area-fm .btn-wrapper {
  margin-top: 0;
}
